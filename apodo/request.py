"""
apodo.request
~~~~~~~~~~~~

This module contains the `Request` class.
"""

from typing import AnyStr
from asyncio import StreamReader, StreamWriter

from .response import Response


class Request:
    """ Implements the `Request` class.

    This object is initiated whenever a new request is received
    by the server, and controls all operations tied to that request.

    The user is encouraged to supply an event `dict` generated by the `Apodo._parse`
    method, but can also supply event attributes as keyword arguments.

    :param `view_function`: The corresponding view function.
    :param `reader`: A `StreamReader` object.
    :param `writer`: A `StreamWriter` object.

    :param `method`: (optional) A `str` of the request method.
    :param `path`: (optional) A `str` of the requested path.
    :param `protocol`: (optional) A `str` of the given protocol.
    :param `headers`: (optional) A `dict` of request headers.
    :param `body`: (optional) A `str` of body content.
    """

    def __init__(
        self,
        view_function,
        reader: StreamReader,
        writer: StreamWriter,
        method: str = None,
        path: str = None,
        protocol: str = None,
        headers: dict = None,
        body: str = None,
    ):
        self.view_function = view_function

        self.reader: StreamReader = reader
        self.writer: StreamWriter = writer

        self.method: str = method
        self.path: str = path
        self.protocol: str = protocol
        self.headers: dict = headers
        self.body: str = body

    async def view(self) -> None:
        """ Executes the user-defined view method. """
        data: AnyStr = await self.view_function(self)

        if type(data) is Response:
            response: Response = data
        else:
            response: Response = Response(self.writer, body=data)

        await response.send()
