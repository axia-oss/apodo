"""
gato.request
~~~~~~~~~~~~

This module contains the `Request` class.
"""

from asyncio import StreamReader, StreamWriter


class Request:
    """ Implements the `Request` class.

    This object is initiated whenever a new request is received
    by the server, and controls all operations tied to that request.

    The user is encouraged to supply an event `dict` generated by the `Gato._parse`
    method, but can also supply event attributes as keyword arguments.

    :param `view_function`: The corresponding view function.
    :param `reader`: A `StreamReader` object.
    :param `writer`: A `StreamWriter` object.

    :param `method`: (optional) A `str` of the request method.
    :param `path`: (optional) A `str` of the requested path.
    :param `protocol`: (optional) A `str` of the given protocol.
    :param `headers`: (optional) A `dict` of request headers.
    :param `body`: (optional) A `str` of body content.
    """

    def __init__(
        self,
        view_function,
        reader: StreamReader,
        writer: StreamWriter,
        method: str = None,
        path: str = None,
        protocol: str = None,
        headers: dict = None,
        body: str = None,
    ):
        self.view_function = view_function

        self.reader = reader
        self.writer = writer

        self.method = method
        self.path = path
        self.protocol = protocol
        self.headers = headers
        self.body = body

    async def view(self):
        """ Executes the user-defined view method. """
        response = await self.view_function(self)
        await self.send(response)

    async def receive(self):
        """ Receives new data. """
        data = self.reader.read(1000)
        return data

    async def send(self, data):
        """ Sends new data. """
        self.writer.write(data)
        await self.writer.drain()

        print(f"{self.method} {self.path} {self.protocol} 200")

    async def close(self):
        """ Closes the connection. """
        self.writer.close()
